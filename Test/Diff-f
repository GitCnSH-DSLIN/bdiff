% --- Test1 (12412 bytes)
% +++ Test2 (3806 bytes)
@ -[0] => +[0] 318 bytes
 // -----------------------------------------------------------------------------..// NOTE: DO NOT COMPILE THIS CODE..//       Provided to test BDiff and BPatch..// -----------------------------------------------------------------------------..unit PatchTestUnit;....interface....uses..  // Delphi..  Windows, SysUtils,
@ -[359] => +[318] 391 bytes
 ..  // Project..  UBDiffTypes;......{ "exported" functions: used by main BDiff engine }....function block_sort(data: PShortIntArray; dlen: size_t): PBlock;....function find_string(data: PShortIntArray; block: PBlock; len: size_t;..                    sub: PShortInt; max: size_t;..                    index: Psize_t): size_t;......implementation......uses..  // Project..  UBDiffUtils;......
+{.. 
@ -[1085] => +[713] 35 bytes
  compare positions a and b in data 
@ -[1128] => +[748] 34 bytes
 area, consider maximum length dlen
+..}
@ -[1214] => +[785] 41 bytes
 ..function block_sort_compare(a: size_t; 
@ -[1294] => +[826] 32 bytes
 b: size_t; data: PShortIntArray;
@ -[1371] => +[858] 27 bytes
 ..  dlen: size_t): Integer;
+..var..  pa: PShortInt;..  pb: PShortInt;..  len: size_t;..begin..  pa := @data[a];..  pb := @data[b];..  len :
@ -[1887] => +[996] 37 bytes
 = dlen - a;..  if dlen - b < len then
+..    len :
@ -[2014] => +[1044] 50 bytes
 = dlen - b;..  while (len <> 0) and (pa^ = pb^) do
+..  begin
@ -[2139] => +[1103] 33 bytes
 ..    Inc(pa); Inc(pb); Dec(len);
+..  end;..  if len = 0 then..  begin
@ -[2351] => +[1172] 28 bytes
 ..    Result := a - b; Exit;
+..  end;
@ -[2456] => +[1208] 24 bytes
 ..  Result := pa^ - pb^;
+..end;....{..  the "sink element" part of heapsort..}
@ -[2740] => +[1285] 40 bytes
 ..procedure block_sort_sink(le: size_t; 
@ -[2819] => +[1325] 26 bytes
 ri: size_t; block: PBlock;
@ -[2887] => +[1351] 40 bytes
 ..  data: PShortIntArray; dlen: size_t);
+..var..  i, j, x: size_t;..begin..  i := le;..  x :
@ -[3268] => +[1442] 28 bytes
 = block[i];..  while True do
+..  begin..    j :
@ -[3429] => +[1488] 29 bytes
 = 2*i+1;..    if j >= ri then
+..      B
@ -[3547] => +[1526] 27 bytes
 reak;..    if j < ri-1 then
@ -[3612] => +[1553] 40 bytes
 ..      if block_sort_compare(block[j], 
@ -[3703] => +[1593] 32 bytes
 block[j+1], data, dlen) < 0 then
+..        Inc(j)
@ -[3828] => +[1641] 42 bytes
 ;..    if block_sort_compare(x, block[j], 
+data, dlen) > 0 then..      B
@ -[4034] => +[1712] 32 bytes
 reak;..    block[i] := block[j];
+..    i := j;..  end;..  block[i] := x;..end;....{.. 
@ -[4403] => +[1797] 37 bytes
  returns array of offsets into data, 
+sorted by position.. 
@ -[4491] => +[1855] 35 bytes
  returns 0 on error (out of memory)
+..}
@ -[448] => +[1893] 68 bytes
 ..function block_sort(data: PShortIntArray; dlen: size_t): PBlock;..
+var..  block: PBlock;..  i, le, ri: size_t;..  x: size_t;..begin
@ -[5104] => +[2025] 35 bytes
 ..  block := malloc(sizeof(size_t) 
+* dlen)
@ -[5306] => +[2067] 28 bytes
 ;..  if not Assigned(block) 
+or (dlen = 0) then..  begin..    Result := nil;..    Exit;..  end;..
@ -[5605] => +[2163] 32 bytes
 ..  { initialize unsorted data }
@ -[5649] => +[2195] 31 bytes
 ..  for i := 0 to Pred(dlen) do
+..    block[i] := i;....  { heapsort }..  le := dlen div 2;..  ri :
@ -[5976] => +[2293] 26 bytes
 = dlen;..  while le > 0 do
+..  begin..    Dec(le)
@ -[6690] => +[2341] 38 bytes
 ;..    block_sort_sink(le, ri, block, 
+data, dlen);..  end;..  while ri > 0 do..  begin..    x :
@ -[6490] => +[2436] 43 bytes
 = block[le];..    block[le] := block[ri-1];
+..    block[ri-1] := x;..    Dec(ri)
@ -[6690] => +[2515] 38 bytes
 ;..    block_sort_sink(le, ri, block, 
+data, dlen);..  end;..  Result := block;..end;....{.. 
@ -[8943] => +[2607] 31 bytes
  find maximum length substring 
@ -[8989] => +[2638] 35 bytes
 starting at sub, at most max bytes 
+data, block,.. 
@ -[9045] => +[2688] 25 bytes
  len characterize source 
@ -[9077] => +[2713] 35 bytes
 fill *index returns found location 
+return value is..  found length..}
@ -[516] => +[2782] 76 bytes
 ..function find_string(data: PShortIntArray; block: PBlock; len: size_t;..  
@ -[9424] => +[2858] 29 bytes
 sub: PShortInt; max: size_t; 
@ -[660] => +[2887] 26 bytes
 index: Psize_t): size_t;..
+var
@ -[9569] => +[2916] 24 bytes
 ..  first, last: size_t;
+..  mid: size_t;..  l0, l: size_t;..  pm: PShortInt;..  sm: PShortInt;..  retval: size_t;..begin
@ -[9981] => +[3036] 32 bytes
 ..  first := 0; last := len - 1;
+..  retval := 0;..  index^ := 0;..
@ -[10461] => +[3102] 26 bytes
 ..  while first <= last do
+..  begin
@ -[10573] => +[3137] 34 bytes
 ..    mid := (first + last) div 2;
@ -[10642] => +[3171] 30 bytes
 ..    pm := @data[block[mid]];
+..    sm :
@ -[10764] => +[3211] 34 bytes
 = sub;..    l := len - block[mid];
+..    if l > max then..      l := max;..    l0 :
@ -[11007] => +[3293] 43 bytes
 = l;..    while (l <> 0) and (pm^ = sm^) do
+..    begin
@ -[11125] => +[3347] 33 bytes
 ..      Dec(l); Inc(pm); Inc(sm);
+..    end;..
@ -[11279] => +[3392] 42 bytes
 ..    { we found a `match' of length l0-l,
+ position block[mid] }
@ -[11367] => +[3456] 29 bytes
 ..    if l0 - l > retval then
+..    begin
@ -[11480] => +[3496] 25 bytes
 ..      retval := l0 - l;
@ -[11546] => +[3521] 29 bytes
 ..      index^ := block[mid];
+..    end;..
@ -[11709] => +[3562] 36 bytes
 ..    if (l = 0) or (pm^ < sm^) then
@ -[11780] => +[3598] 24 bytes
 ..      first := mid + 1
+..      else
@ -[11900] => +[3634] 35 bytes
 ..      begin..        last := mid;
@ -[11974] => +[3669] 27 bytes
 ..        if last <> 0 then
+..          Dec(last)..  
@ -[12135] => +[3721] 28 bytes
       else..          Break;
+..      end;..  end;..  Result := retval;..end;....end...
