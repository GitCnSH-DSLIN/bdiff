// -----------------------------------------------------------------------------
// NOTE: DO NOT COMPILE THIS CODE
//       Provided to test BDiff and BPatch
// -----------------------------------------------------------------------------
unit PatchTestUnit;

interface

uses
  // Delphi
  Windows, SysUtils,
  // Project
  UBDiffTypes;


{ "exported" functions: used by main BDiff engine }

function block_sort(data: PShortIntArray; dlen: size_t): PBlock;

function find_string(data: PShortIntArray; block: PBlock; len: size_t;
                    sub: PShortInt; max: size_t;
                    index: Psize_t): size_t;


implementation


uses
  // Project
  UBDiffUtils;


{
  compare positions a and b in data area, consider maximum length dlen
}
function block_sort_compare(a: size_t; b: size_t; data: PShortIntArray;
  dlen: size_t): Integer;
var
  pa: PShortInt;
  pb: PShortInt;
  len: size_t;
begin
  pa := @data[a];
  pb := @data[b];
  len := dlen - a;
  if dlen - b < len then
    len := dlen - b;
  while (len <> 0) and (pa^ = pb^) do
  begin
    Inc(pa); Inc(pb); Dec(len);
  end;
  if len = 0 then
  begin
    Result := a - b; Exit;
  end;
  Result := pa^ - pb^;
end;

{
  the "sink element" part of heapsort
}
procedure block_sort_sink(le: size_t; ri: size_t; block: PBlock;
  data: PShortIntArray; dlen: size_t);
var
  i, j, x: size_t;
begin
  i := le;
  x := block[i];
  while True do
  begin
    j := 2*i+1;
    if j >= ri then
      Break;
    if j < ri-1 then
      if block_sort_compare(block[j], block[j+1], data, dlen) < 0 then
        Inc(j);
    if block_sort_compare(x, block[j], data, dlen) > 0 then
      Break;
    block[i] := block[j];
    i := j;
  end;
  block[i] := x;
end;

{
  returns array of offsets into data, sorted by position
  returns 0 on error (out of memory)
}
function block_sort(data: PShortIntArray; dlen: size_t): PBlock;
var
  block: PBlock;
  i, le, ri: size_t;
  x: size_t;
begin
  block := malloc(sizeof(size_t) * dlen);
  if not Assigned(block) or (dlen = 0) then
  begin
    Result := nil;
    Exit;
  end;

  { initialize unsorted data }
  for i := 0 to Pred(dlen) do
    block[i] := i;

  { heapsort }
  le := dlen div 2;
  ri := dlen;
  while le > 0 do
  begin
    Dec(le);
    block_sort_sink(le, ri, block, data, dlen);
  end;
  while ri > 0 do
  begin
    x := block[le];
    block[le] := block[ri-1];
    block[ri-1] := x;
    Dec(ri);
    block_sort_sink(le, ri, block, data, dlen);
  end;
  Result := block;
end;

{
  find maximum length substring starting at sub, at most max bytes data, block,
  len characterize source fill *index returns found location return value is
  found length
}
function find_string(data: PShortIntArray; block: PBlock; len: size_t;
  sub: PShortInt; max: size_t; index: Psize_t): size_t;
var
  first, last: size_t;
  mid: size_t;
  l0, l: size_t;
  pm: PShortInt;
  sm: PShortInt;
  retval: size_t;
begin
  first := 0; last := len - 1;
  retval := 0;
  index^ := 0;

  while first <= last do
  begin
    mid := (first + last) div 2;
    pm := @data[block[mid]];
    sm := sub;
    l := len - block[mid];
    if l > max then
      l := max;
    l0 := l;
    while (l <> 0) and (pm^ = sm^) do
    begin
      Dec(l); Inc(pm); Inc(sm);
    end;

    { we found a `match' of length l0-l, position block[mid] }
    if l0 - l > retval then
    begin
      retval := l0 - l;
      index^ := block[mid];
    end;

    if (l = 0) or (pm^ < sm^) then
      first := mid + 1
      else
      begin
        last := mid;
        if last <> 0 then
          Dec(last)
        else
          Break;
      end;
  end;
  Result := retval;
end;

end.
