.TH BDIFF 1 "July 1999"
.SH "NAME"
bdiff \- difference of binary files

.SH "SYNOPSIS"
.B bdiff [options]
.I old-file new-file
.BI > patch-file

.SH "DESCRIPTION"
.B bdiff
computes differences between two binary files. Output can be either a
somewhat human-readable protocol, or a binary file readable by
.BR bpatch .
It handles insertion and deletion of data as well as changed bytes.

.SH "OPTIONS"
.IP "-q"
Use QUOTED format (default);
.IP "-f"
Use FILTERED format;
.IP "-b"
Use BINARY format;
.IP "--format=\fIFMT\fR"
Select format by name
.RI ( binary ", " filtered ", " quoted );
.IP "-m \fIN\fR, --min-equal=\fIN\fR"
Two chunks of data are recognized as being identical if they are at
least \fIN\fR bytes long, the default is 24;
.IP "-o \fIFILENAME\fR, --output=\fIFILENAME\fR"
Specify output file name. Use this instead of a shell redirection
to get binary output on an MS-DOS system: \fBbdiff\fR does not contain
non-portable hacks to massage stdout into binary mode. Specifying
\fB--output=-\fR does nothing;
.IP "-V, --verbose"
Print status messages while processing input;
.IP "-h, --help"
Show help screen and exit;
.IP "-v, --version"
Show version number and exit.

.SH "ALGORITHM"

\fBbdiff\fR tries to locate maximum-length substrings of the new file
in the old data. Substrings shorter than \fIN\fR (argument to the
\fB-m\fR option) are not considered acceptable matches. Everything
covered by such a substring is transmitted as a position, length pair,
everything else as literal data.

\fBbdiff\fR uses the block-sort technique to allow O(lgN) searches in
the file, giving an estimated O(NlgN) algorithm on average.

The program requires about five times as much memory as the old file,
plus storage for the new file. This should be real memory, \fBbdiff\fR
accesses all of it very often.

.SH "OUTPUT FORMATS"
Output always goes to standard output.

.B The quoted format
(default) is similar to \fBdiff\fR output in
unified format: `+' means added data, and a space means data kept from
the old file. Lines prefixed with `@' inform you about the position
of the next `space' line in the source file (byte offset).
Unlike in \fBdiff\fR, there's no implicit line feed after each
line of output. Non-printable characters (see \fBisprint(3)\fR) and
the backslash character are represented by a \e followed by the octal
three-digit character code.

.B The filtered format
is like the quoted format, but non-printable characters are replaced
by dots (.) here.

.B The binary format
is machine-readable, and omits details for common
blocks. All words are in little-endian format (low byte first).

.IP "8 bytes"
Signature "bdiff02\ex1A", where 02 is kind-of a version number.
An earlier version (with an O(n^3) algorithm) used the
number 01. \ex1A is ASCII 26 (Control-Z, an MS-DOS end-of-file marker).
.IP "4 bytes"
Length of old file in bytes.
.IP "4 bytes"
Length of new file in bytes.
.IP "n bytes"
The patch itself, a sequence of the following records:

.RS
.PP
.B literally added data:
.IP "1 byte"
ASCII 43 (`+');
.IP "4 bytes"
number of bytes;
.IP "n bytes"
data.

.PP
.B common block:
.IP "1 byte"
ASCII 64 (`@');
.IP "4 bytes"
file position in old file;
.IP "4 bytes"
number of bytes;
.IP "4 bytes"
checksum.

.RE
The checksum is computed using the following algorithm:
.nf
   long checksum(char* data, size_t len)
   {
       long l = 0;
       while(len--) {
           l = ((l >> 30) & 3) | (l << 2);
           l ^= *data++;
       }
       return l;
   }
.fi
(rotate current checksum left by two and xor in the current byte)

.SH "ADMINISTRATIVIA"
This manual page is for version 0.2 of \fBbdiff\fR.

(c) copyright 1999 by Stefan Reuther <Streu@gmx.de>. Copying this
program is allowed, as long as you include source code and document
changes you made in a user-visible way so people know they're using
your version, not mine.

This program is distributed in the hope that it will be useful, but
without warranties of any kind, be they explicit or implicit.

.SH "SEE ALSO"
.BR diff (1),
.BR patch (1),
.BR bpatch (1),
.BR isprint (3)
